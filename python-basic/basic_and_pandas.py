# -*- coding: utf-8 -*-
"""basic_and_pandas

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dvxEwePMIAivgTDyCKmT90A8IgVwdABf
"""

# 변수와 자료형

name = "YunSeek"
age = 32
height = 174
is_ai_developer = True

print(name, age, height, is_ai_developer)

# 조건문
if age > 20:
  print("성인입니다.")
else:
  print("미성년자입니다.")

# 반복문
for i in range(5):
  print("반복:" , i)

# while
count = 0
while count < 3:
  print("while 반복:", count)
  count += 1

fruits = ["apple", "banana", "cherry"]
print(fruits[0])
fruits.append("orange")
print(fruits)
fruits.remove("banana")
print(fruits)

squares = [x**2 for x in range(5)]
print(squares)

words = ["apple", "ai", "banana", "go", "grape"]
ansewr = [word for word in words if len(word) >= 5]
print(ansewr)

user = {
    "name":"YunSeek",
    "age":32,
    "is_dev":True
}

print(user["name"])
user["email"] = "yun@ai.com"
print(user.get("email"))

position = (100, 200)
print(position[0])
# position[0] = 300

a = {1,2,3}
b ={2,3,4}
print(a & b)
print(a | b)
print(a-b)

# 1. 이름 리스트에서 'Tom'을 제거하고, 'Lisa' 추가하기
names = ["John", "Tom", "Jane"]
# 여기에 코드 작성
names.remove("Tom")
names.append("Lisa")
print(names)

# 2. 학생 정보 딕셔너리에 'score': 95 추가하고 출력하기
student = {"name": "YunSeek", "age": 32}
# 여기에 코드 작성
student["score"] = 95
print(student)

my_dict = {"이름": "YunSeek"}

# 다른 딕셔너리 추가
another_dict = {"나이": 32, "직업": "개발자"}
my_dict.update(another_dict)

print(my_dict)

# 키-값 쌍의 리스트 추가
new_data = [("도시", "서울"), ("취미", "코딩")]
my_dict.update(new_data)

print(my_dict)

# 3. 집합 a = {1, 2, 3}, b = {2, 4, 6}의 교집합과 합집합 출력
# 여기에 코드 작성
a = {1, 2, 3}
b = {2, 4, 6}
print(a & b)
print(a | b)

def add(a, b):
  return a + b

result = add(3, 5)
print(result)

def greeting(name):
  return f"Hello, {name}"

print(greeting("YunSeek"))

def say(message="안녕!"):
  print(message)

say()
say("반가워!")

def introduce(name, age, job="AI 개발자"):
  print(f"{name} ({age}) - {job}")

introduce("YunSeek", 32)
introduce("Lisa", 30, "디자이너")

square = lambda x : x ** 2
print(square(4))

def introduce(name, age):
  return f"{name}님은 {age}세입니다."

print(introduce("YunSeek", 32))

def absolute(num):
  return abs(num)

def filter_even(numbers):
  return [num for num in numbers if num % 2 == 0]

print(absolute(-3))
print(filter_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

  def introduce(self):
    print(f"안녕하세요, 저는 {self.name}, {self.age}살입니다.")

p1 = Person("YunSeek", 32)
p1.introduce()

class Dog:
  def __init__(self, name, breed):
    self.name = name
    self.breed = breed
    print(f"이름: {name}, 견종: {breed}")

  def bark(self):
    print("멍멍!")

dog = Dog("Coco", "Poodle")
dog.bark()

class Calculator:
  def __init__(self, num1, num2):
    self.num1 = num1
    self.num2 = num2

  def add(self):
    return self.num1 + self.num2

  def sub(self):
    return self.num1 - self.num2

  def mul(self):
    return self.num1 * self.num2

  def div(self):
    return self.num1 / self.num2

cal = Calculator(10, 20)
print(cal.add())

class Person:
  def __init__(self) -> None:
    pass
  def introduce(self):
    print("사람입니다.")

class Student(Person):
  def __init__(self) -> None:
    self.__private = "비밀"
  def introduce(self):
    print("학생입니다.")
  def __str__(self):
    return "홍길동, 20세 학생"

  def get_secret(self):
    return self.__private


student = Student()
student.introduce()
print(student)
# print(student.__private)
print(student.get_secret())

import pandas as pd

df = pd.read_csv("https://raw.githubusercontent.com/mwaskom/seaborn-data/master/iris.csv")

print(df.head())

print(df.describe())

print(df.columns)

print(df['species'].value_counts())

print(df[df['petal_length'] > 5.0])

print(df.groupby('species')['sepal_width'].mean())

print(df[df['species'] == 'setosa'].head(10))